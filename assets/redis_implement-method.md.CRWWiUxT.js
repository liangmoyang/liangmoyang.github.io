import{_ as e,o as a,c as o,R as t}from"./chunks/framework.LBXiIpgL.js";const u=JSON.parse('{"title":"常见的五种数据类型的实现方式","description":"","frontmatter":{},"headers":[],"relativePath":"redis/implement-method.md","filePath":"redis/implement-method.md"}'),d={name:"redis/implement-method.md"},r=t('<h1 id="常见的五种数据类型的实现方式" tabindex="-1">常见的五种数据类型的实现方式 <a class="header-anchor" href="#常见的五种数据类型的实现方式" aria-label="Permalink to &quot;常见的五种数据类型的实现方式&quot;">​</a></h1><p>常见的五种数据类型分别是：string、list、hash、set、zset。</p><p>网上看见的最多的实现方式的分析大多都是基于<code>3.0</code>版本，而在<code>7.0</code>版本之后，list、hash以及zset都有了新的实现方式。</p><h2 id="string" tabindex="-1">string <a class="header-anchor" href="#string" aria-label="Permalink to &quot;string&quot;">​</a></h2><p>基于int和SDS实现（简单动态字符串）。</p><p>SDS不仅可以保存文本数据，还可以保存二进制数据，并且结构里使用了<code>len</code>属性来记录字符串的长度。</p><p>SDS API是安全的，拼接字符串时会检查空间是否满足要求，如果空间不够就会自动扩容，并不会造成缓冲区的溢出。</p><p>内部编码方式：int、raw和embstr。</p><h2 id="set" tabindex="-1">set <a class="header-anchor" href="#set" aria-label="Permalink to &quot;set&quot;">​</a></h2><p><code>IF</code> 元素都是整数 <code>&amp;&amp;</code> 元素数量小于512<br>   使用<code>整数集合</code><br><code>ELSE</code><br>   使用<code>哈希表</code></p><h2 id="list" tabindex="-1">list <a class="header-anchor" href="#list" aria-label="Permalink to &quot;list&quot;">​</a></h2><h4 id="旧" tabindex="-1">旧 <a class="header-anchor" href="#旧" aria-label="Permalink to &quot;旧&quot;">​</a></h4><p><code>IF</code>元素的值都小于64字节 <code>&amp;&amp;</code> 元素数量小于512<br>   使用<code>压缩列表</code><br><code>ELSE</code><br>   使用<code>双向链表</code></p><h4 id="现" tabindex="-1">现 <a class="header-anchor" href="#现" aria-label="Permalink to &quot;现&quot;">​</a></h4><p>只使用<code>quicklist快速列表</code></p><h2 id="hash" tabindex="-1">hash <a class="header-anchor" href="#hash" aria-label="Permalink to &quot;hash&quot;">​</a></h2><h4 id="旧-1" tabindex="-1">旧 <a class="header-anchor" href="#旧-1" aria-label="Permalink to &quot;旧&quot;">​</a></h4><p><code>IF</code>元素的值都小于64字节 <code>&amp;&amp;</code> 元素数量小于512<br>   使用<code>压缩列表</code><br><code>ELSE</code><br>   使用<code>哈希表</code></p><p>应用场景：缓存对象、购物车。</p><h4 id="现-1" tabindex="-1">现 <a class="header-anchor" href="#现-1" aria-label="Permalink to &quot;现&quot;">​</a></h4><p>只使用<code>listpack紧凑列表</code></p><h2 id="zset" tabindex="-1">zset <a class="header-anchor" href="#zset" aria-label="Permalink to &quot;zset&quot;">​</a></h2><h4 id="旧-2" tabindex="-1">旧 <a class="header-anchor" href="#旧-2" aria-label="Permalink to &quot;旧&quot;">​</a></h4><p><code>IF</code>元素的值都小于64字节 <code>&amp;&amp;</code> 元素数量小于128<br>   使用<code>压缩列表</code><br><code>ELSE</code><br>   使用<code>跳表</code></p><h4 id="现-2" tabindex="-1">现 <a class="header-anchor" href="#现-2" aria-label="Permalink to &quot;现&quot;">​</a></h4><p>只使用<code>listpack紧凑列表</code></p><p>应用场景：排行榜、电话姓名排序</p>',27),c=[r];function i(h,s,l,n,p,m){return a(),o("div",null,c)}const _=e(d,[["render",i]]);export{u as __pageData,_ as default};
