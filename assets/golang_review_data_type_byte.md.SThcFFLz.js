import{_ as s,o as a,c as n,R as e}from"./chunks/framework.LBXiIpgL.js";const u=JSON.parse('{"title":"byte 字节","description":"","frontmatter":{},"headers":[],"relativePath":"golang_review/data_type/byte.md","filePath":"golang_review/data_type/byte.md"}'),l={name:"golang_review/data_type/byte.md"},o=e(`<h1 id="byte-字节" tabindex="-1">byte 字节 <a class="header-anchor" href="#byte-字节" aria-label="Permalink to &quot;byte 字节&quot;">​</a></h1><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><ul><li>等同于<code>uint8</code>，常用来处理<code>ascii</code>字符。</li><li>最大值是255，会溢出 <ul><li>所以<code>for i=0;i&lt;=255;i++</code>永远成立</li></ul></li></ul><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><ul><li>[]byte转string的黑魔法</li></ul><div class="language-Go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Bytes2String</span><span style="color:#E1E4E8;">(b []</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">)(unsafe.</span><span style="color:#79B8FF;">Pointer</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">b))</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Bytes2String</span><span style="color:#24292E;">(b []</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">)(unsafe.</span><span style="color:#005CC5;">Pointer</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">b))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,6),t=[o];function p(r,c,i,y,E,d){return a(),n("div",null,t)}const h=s(l,[["render",p]]);export{u as __pageData,h as default};
