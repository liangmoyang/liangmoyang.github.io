import{_ as s,o as n,c as a,R as l}from"./chunks/framework.LBXiIpgL.js";const h=JSON.parse('{"title":"string字符串、rune类型","description":"","frontmatter":{},"headers":[],"relativePath":"golang_review/data_type/string.md","filePath":"golang_review/data_type/string.md"}'),p={name:"golang_review/data_type/string.md"},o=l(`<h1 id="string字符串、rune类型" tabindex="-1">string字符串、rune类型 <a class="header-anchor" href="#string字符串、rune类型" aria-label="Permalink to &quot;string字符串、rune类型&quot;">​</a></h1><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><ul><li>string是8位字节的集合，通常但不一定代表UTF-8编码的文本。 <ul><li>默认编码方式是UTF-8</li></ul></li><li>string可以为empty，但不能为nil。</li><li>在C语言中，字符串是用0结尾的；而Golang采用的方案是在字符串内存的结尾处多存了一个<code>len</code>。</li><li>string不可以被改变 <ul><li>string其实是被分配到只读内存，所以修改操作本质上实在创建新的字符串，频繁修改时应使用<code>strings.Builder</code>。只读的好处是在并发下可以不加锁。</li><li>每一次更改都要重新分配一次内存，旧值的内存空间还需要被GC，相对于<code>[]byte</code>要低效。</li><li>可以被替换（待补充）</li></ul></li><li>拼接方式（效率从高到低） <ul><li><code>strings.Join\`\`strings.Builder</code></li><li><code>bytes.Buffer</code></li><li>[]byte转string</li><li><code>+</code></li><li><code>fmt.Sprintf</code></li></ul></li><li>字符串比较 <ul><li>==</li><li><code>strings.Compare</code></li></ul></li></ul><h2 id="底层" tabindex="-1">底层 <a class="header-anchor" href="#底层" aria-label="Permalink to &quot;底层&quot;">​</a></h2><div class="language-Go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">stringStruct</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	str unsafe.Pointer</span></span>
<span class="line"><span style="color:#E1E4E8;">	len </span><span style="color:#F97583;">int</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">stringStruct</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	str unsafe.Pointer</span></span>
<span class="line"><span style="color:#24292E;">	len </span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>string的底层数据结构是byte数组。因此，在标准库里，string占用的空间大小（元素大小）永远是16，因为string本质上存的是指针和len（8+8=16）</p><div class="language-Go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">unsafe.</span><span style="color:#79B8FF;">Sizeof</span><span style="color:#E1E4E8;">(s) </span><span style="color:#6A737D;">// 16</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">unsafe.</span><span style="color:#005CC5;">Sizeof</span><span style="color:#24292E;">(s) </span><span style="color:#6A737D;">// 16</span></span></code></pre></div><h2 id="len" tabindex="-1">len <a class="header-anchor" href="#len" aria-label="Permalink to &quot;len&quot;">​</a></h2><ul><li>中文字符在unicode下占2个字符，在UTF-8下占3个字节，因此包含中文的字符用<code>len()</code>未必是想要的长度。</li><li><code>len()</code>获取的是字节个数，不是字符个数。</li></ul><div class="language-Go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">s </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Hi,梁漠阳&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(s) </span><span style="color:#6A737D;">// 12 1+1+1+3+3+3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">s </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hi,梁漠阳&quot;</span></span>
<span class="line"><span style="color:#005CC5;">len</span><span style="color:#24292E;">(s) </span><span style="color:#6A737D;">// 12 1+1+1+3+3+3</span></span></code></pre></div><ul><li>可以转为<code>[]rune</code>后，每个字符都用int32标识，就可以获取另一种长度。</li><li>rune类型，等同于int32，常用来处理unicode或UTF-8字符。</li></ul><div class="language-Go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">newRune </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> []</span><span style="color:#79B8FF;">rune</span><span style="color:#E1E4E8;">(s)</span></span>
<span class="line"><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(newRune) </span><span style="color:#6A737D;">// 6</span></span>
<span class="line"><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(utf8.</span><span style="color:#79B8FF;">RuneCountInString</span><span style="color:#E1E4E8;">(s)) </span><span style="color:#6A737D;">// 6</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">newRune </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> []</span><span style="color:#005CC5;">rune</span><span style="color:#24292E;">(s)</span></span>
<span class="line"><span style="color:#005CC5;">len</span><span style="color:#24292E;">(newRune) </span><span style="color:#6A737D;">// 6</span></span>
<span class="line"><span style="color:#005CC5;">len</span><span style="color:#24292E;">(utf8.</span><span style="color:#005CC5;">RuneCountInString</span><span style="color:#24292E;">(s)) </span><span style="color:#6A737D;">// 6</span></span></code></pre></div><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><ul><li>string转[]byte黑魔法</li></ul><div class="language-Go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String2Bytes</span><span style="color:#E1E4E8;">(s </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) []</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">     sh </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">reflect.StringHeader)(unsafe.</span><span style="color:#79B8FF;">Pointer</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">s))</span></span>
<span class="line"><span style="color:#E1E4E8;">     bh </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> reflect.SliceHeader{</span></span>
<span class="line"><span style="color:#E1E4E8;">         Data: sh.Data,</span></span>
<span class="line"><span style="color:#E1E4E8;">         Len:  sh.Len,</span></span>
<span class="line"><span style="color:#E1E4E8;">        Cap:  sh.Len,</span></span>
<span class="line"><span style="color:#E1E4E8;">     }</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">[]</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">)(unsafe.</span><span style="color:#79B8FF;">Pointer</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">bh))</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">string2bytes</span><span style="color:#E1E4E8;">(s </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) []</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">[]</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">)(unsafe.</span><span style="color:#79B8FF;">Pointer</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">s))</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String2Bytes</span><span style="color:#24292E;">(s </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) []</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">     sh </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">reflect.StringHeader)(unsafe.</span><span style="color:#005CC5;">Pointer</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">s))</span></span>
<span class="line"><span style="color:#24292E;">     bh </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> reflect.SliceHeader{</span></span>
<span class="line"><span style="color:#24292E;">         Data: sh.Data,</span></span>
<span class="line"><span style="color:#24292E;">         Len:  sh.Len,</span></span>
<span class="line"><span style="color:#24292E;">        Cap:  sh.Len,</span></span>
<span class="line"><span style="color:#24292E;">     }</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">[]</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">)(unsafe.</span><span style="color:#005CC5;">Pointer</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">bh))</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">string2bytes</span><span style="color:#24292E;">(s </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) []</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">[]</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">)(unsafe.</span><span style="color:#005CC5;">Pointer</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">s))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="文章推荐-参考" tabindex="-1">文章推荐/参考 <a class="header-anchor" href="#文章推荐-参考" aria-label="Permalink to &quot;文章推荐/参考&quot;">​</a></h2><ul><li><a href="https://juejin.cn/post/6889713026287534094" target="_blank" rel="noreferrer">Golang中[]byte与string转换全解析</a></li></ul>`,17),e=[o];function t(c,r,i,y,E,d){return n(),a("div",null,e)}const g=s(p,[["render",t]]);export{h as __pageData,g as default};
