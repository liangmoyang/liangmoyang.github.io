import{_ as s,o as a,c as n,R as l}from"./chunks/framework.LBXiIpgL.js";const _=JSON.parse('{"title":"语法妙妙屋","description":"","frontmatter":{},"headers":[],"relativePath":"golang_review/syntax_tips.md","filePath":"golang_review/syntax_tips.md"}'),o={name:"golang_review/syntax_tips.md"},p=l(`<h1 id="语法妙妙屋" tabindex="-1">语法妙妙屋 <a class="header-anchor" href="#语法妙妙屋" aria-label="Permalink to &quot;语法妙妙屋&quot;">​</a></h1><h2 id="slice-map-nil" tabindex="-1">slice map ：nil <a class="header-anchor" href="#slice-map-nil" aria-label="Permalink to &quot;slice map ：nil&quot;">​</a></h2><ol><li>允许对nil slice添加元素，但不能对nil map添加元素</li></ol><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> s []</span><span style="color:#F97583;">int</span></span>
<span class="line"><span style="color:#E1E4E8;">s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">append</span><span style="color:#E1E4E8;">(s,</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// success</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> m </span><span style="color:#F97583;">map</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">int</span></span>
<span class="line"><span style="color:#E1E4E8;">m[</span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 运行时panic</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> s []</span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#24292E;">s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">append</span><span style="color:#24292E;">(s,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// success</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> m </span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#24292E;">m[</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 运行时panic</span></span></code></pre></div><h2 id="修改string" tabindex="-1">修改string <a class="header-anchor" href="#修改string" aria-label="Permalink to &quot;修改string&quot;">​</a></h2><p>硬要修改<code>string</code>的话，可以将string转为<code>[]byte</code>后修改，然后转为<code>string</code>。但是要注意，在<code>string</code>转为<code>[]byte</code>时，是复制行为，很耗性能。</p><h2 id="switch" tabindex="-1">switch <a class="header-anchor" href="#switch" aria-label="Permalink to &quot;switch&quot;">​</a></h2><ul><li>强制执行下一个case，使用<code>fallthrogh</code>关键字</li></ul>`,8),e=[p];function t(c,r,i,y,d,E){return a(),n("div",null,e)}const g=s(o,[["render",t]]);export{_ as __pageData,g as default};
