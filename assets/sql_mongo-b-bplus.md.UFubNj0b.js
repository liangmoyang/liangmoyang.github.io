import{_ as s,o as a,c as n,R as l}from"./chunks/framework.LBXiIpgL.js";const o="/assets/1.IqRwivwS.png",p="/assets/2.AYIpbYWq.png",B=JSON.parse('{"title":"MongoDB的索引，B树和B+树之论","description":"","frontmatter":{},"headers":[],"relativePath":"sql/mongo-b-bplus.md","filePath":"sql/mongo-b-bplus.md"}'),e={name:"sql/mongo-b-bplus.md"},t=l('<link rel="stylesheet" type="text/css" href="../base.css"><h1 id="mongodb的索引-b树和b-树之论" tabindex="-1">MongoDB的索引，B树和B+树之论 <a class="header-anchor" href="#mongodb的索引-b树和b-树之论" aria-label="Permalink to &quot;MongoDB的索引，B树和B+树之论&quot;">​</a></h1><h2 id="前文" tabindex="-1">前文 <a class="header-anchor" href="#前文" aria-label="Permalink to &quot;前文&quot;">​</a></h2><p>截止2023年10月24日，官网文档上的说法仍是B树。<a href="https://www.mongodb.com/docs/v7.0/indexes/" target="_blank" rel="noreferrer">https://www.mongodb.com/docs/v7.0/indexes/</a><img src="'+o+'" alt="官网截图"> 但根据WiredTiger引擎的作者的说法，实际是B+树。（WiredTiger是MongoDB的默认引擎）</p><p><i><u>其实这点我感到疑惑：Mongo是开源的，而且也有名气，为什么还没有一个大神通过源码来对这个事情盖棺定论？</u></i></p><p>虽然目前不确定MongoDB的索引结构到底是B树还是B+树，但是我们仍可以从两者的区别中进行探讨。本文基于MongoDB使用的是B树来探讨。</p><h2 id="b树、b-树" tabindex="-1">B树、B+树 <a class="header-anchor" href="#b树、b-树" aria-label="Permalink to &quot;B树、B+树&quot;">​</a></h2><h4 id="b树" tabindex="-1">B树 <a class="header-anchor" href="#b树" aria-label="Permalink to &quot;B树&quot;">​</a></h4><ul><li>每个节点都存储数据</li><li>叶子节点之间没有指针相邻</li></ul><h4 id="b-树" tabindex="-1">B+树 <a class="header-anchor" href="#b-树" aria-label="Permalink to &quot;B+树&quot;">​</a></h4><ol><li>数据只存储在叶子节点</li><li>叶子节点之间增加了一个指针，形成链表结构 <ul><li>在范围查询时，只需要通过首尾指针，链表就可以把所有节点都遍历出来</li></ul></li></ol><h4 id="结构分析" tabindex="-1">结构分析 <a class="header-anchor" href="#结构分析" aria-label="Permalink to &quot;结构分析&quot;">​</a></h4><p>B树在查询单条数据时，查询效率不固定，最好的情况是O(1)，因此在不需要遍历查找叶子节点的单一数据的情况下，使用B树的性能会更好。但是，因为叶子节点之间没有指针相邻，因此在需要遍历节点的时候，就显得不那么合适。 而B+树的节点之间因为有相邻指针的存在，在范围查询的遍历操作上的性能就具有优势。</p><h2 id="选择b树的原因" tabindex="-1">选择B树的原因 <a class="header-anchor" href="#选择b树的原因" aria-label="Permalink to &quot;选择B树的原因&quot;">​</a></h2><p>MongoDB是非关系型数据库，从使用方面来说，范围查询是比关系型数据库要少的，更倾向于追求查询单条数据的性能。</p><h4 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h4><p>比如班级和学生的一对多关系，如果使用MySQL，设计如下： <img src="'+p+`" alt="表结构"> 关系型的连表查询，都避免不了从一个表中取出数据，去另一个表中逐一匹配的操作，在这种情形下，使用B+树会极大地提高匹配速度。 然而，在非关系型数据库中，通常并不会这样拆分两份数据，而是如下设计：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;uid&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;username&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;梁先生&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;child&quot;</span><span style="color:#E1E4E8;">:[</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;cid&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;cname&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;梁幺幺&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;cid&quot;</span><span style="color:#E1E4E8;">:,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;cname&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;梁二二&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;uid&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;username&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;李先生&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;child&quot;</span><span style="color:#E1E4E8;">:[</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;cid&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;cname&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;李宝宝&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;uid&quot;</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;username&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;梁先生&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;child&quot;</span><span style="color:#24292E;">:[</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;cid&quot;</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;cname&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;梁幺幺&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;cid&quot;</span><span style="color:#24292E;">:,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;cname&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;梁二二&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;uid&quot;</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;username&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;李先生&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;child&quot;</span><span style="color:#24292E;">:[</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;cid&quot;</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;cname&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;李宝宝&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这就形成了单一数据结构，不需要逐行匹配。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>在关系型数据中，遍历操作比较常见，因此使用B+树作为索引结构，比较合适。 在非关系型数据中，单一查询比较常见，因此使用B树作为索引结构。</p><h2 id="文章参考" tabindex="-1">文章参考 <a class="header-anchor" href="#文章参考" aria-label="Permalink to &quot;文章参考&quot;">​</a></h2><ul><li><a href="https://www.cnblogs.com/everlose/p/12825672.html" target="_blank" rel="noreferrer">MongoDB 的索引到底是使用 B+ 树还是 B 树</a></li><li><a href="https://blog.csdn.net/lyshark_lyshark/article/details/126793052" target="_blank" rel="noreferrer">为什么 MongoDB 使用 B 树？</a></li></ul>`,23),c=[t];function r(E,i,y,u,q,d){return a(),n("div",null,c)}const b=s(e,[["render",r]]);export{B as __pageData,b as default};
